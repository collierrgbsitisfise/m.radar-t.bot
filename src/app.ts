import * as TelegramBot from "node-telegram-bot-api";
import TelegramService from "./services/tg.service";
import TextControllersHanlder from "./controllers/text.controllers";
import CacheService from "./services/cache.service";
import RadarService from "./services/radar.service";

//get Token
const tService = new TelegramService();
const CS = new CacheService();
const RS = new RadarService();

tService.setTelegramTokenFromEnv();

const token = tService.getTelegramToken();
// Create a bot that uses 'polling' to fetch new updates
const bot = new TelegramBot(token, { polling: true });

const textControllers = new TextControllersHanlder(bot);

bot.onText(/\/ping/, msg => textControllers.pingHandler(msg));

bot.onText(/\/start/, async msg => {
  const chatId = msg.chat.id;
  await bot.sendMessage(
    chatId,
    `–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç üëã üëã üëã  –±–æ—Ç @mRadarMoldovaBot.–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ –ø–æ–ª–æ–∂–µ–Ω–∏—è üö©üö©üö© üì¢üì¢üì¢:\n
      1)–°–æ–æ–±—â–∞—Ç—å –æ –ø–æ—Ç—Ä—É–ª–µ üó£üó£üó£ üöìüöìüöì \n 
      2)–£–∑–Ω–∞—Ç—å –æ –ø–æ—Ç—Ä—É–ª–µ –≤ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ–º–æ–º –æ—Ç –í–∞—Å —Ä–∞–¥–∏—É—Å–µ üëÄüëÄ \n`
  );
  await textControllers.pingHandler(msg);
});

bot.on("location", async msg => {
  const { latitude, longitude } = msg.location;
  const chatId = msg.chat.id;
  await CS.setValue(chatId, { latitude, longitude });
  bot.sendMessage(chatId, "–í—ã–±–∏—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "–°–æ–æ–±—â–∏—Ç—å –æ –ø–æ—Ç—Ä—É–ª–µ",
            callback_data: JSON.stringify({
              add: true,
              km: null
            })
          }
        ],
        [
          {
            text: "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–∞–¥–∏—É—Å–µ 10–∫–º",
            callback_data: JSON.stringify({
              add: false,
              km: 2
            })
          }
        ],
        [
          {
            text: "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–∞–¥–∏—É—Å–µ 20–∫–º",
            callback_data: JSON.stringify({
              add: false,
              km: 5
            })
          }
        ],
        [
          {
            text: "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–∞–¥–∏—É—Å–µ 40–∫–º",
            callback_data: JSON.stringify({
              add: false,
              km: 10
            })
          }
        ],
        [
          {
            text: "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–∞–¥–∏—É—Å–µ 60–∫–º",
            callback_data: JSON.stringify({
              add: false,
              km: 30
            })
          }
        ],
        [
          {
            text: "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–∞–¥–∏—É—Å–µ 80–∫–º",
            callback_data: JSON.stringify({
              add: false,
              km: 50
            })
          }
        ]
      ]
    }
  });
});

bot.on("callback_query", async callbackQuery => {
  const { from } = callbackQuery;
  let data = JSON.parse(callbackQuery.data);
  let fromCache = await CS.getValue(from.id);
  const userLocationData = JSON.parse(fromCache.data.data);

  if (fromCache.error) {
    bot.sendMessage(from.id, "–î–µ–π—Å—Ç–≤–∏–µ —Å–ª–µ–¥—É–µ—Ç –≤—ã–±–∏—Ä–∞—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–∏ 60 –º–∏–Ω");
    return;
  }
  if (data.add) {
    await RS.createRadarPoint(
      userLocationData.latitude,
      userLocationData.longitude
    );
    bot.sendMessage(from.id, "–æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω");
    return;
  }

  const linkG = await RS.getRadarPoint(
    userLocationData.latitude,
    userLocationData.longitude,
    data.km
  );
  bot.sendPhoto(from.id, linkG);
});
